substitutions:
  name: "bluetooth-proxy"
  friendly_name: "Bluetooth Proxy"
  esp32_led_order: "GRB"  #RGB

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: SmartHomeGuys.Bluetooth Proxy
    version: "2025.8.0"
  name_add_mac_suffix: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: n


# Enable logging
logger:

# Enable Home Assistant API
api:
  # No encryption key should be added when flashed for distribution

ota:
  - platform: esphome
    id: ota_esphome
  - platform: http_request
    id: ota_http_request

http_request:
  verify_ssl: false

wifi:
  # Dont add wifi details, just Enable fallback hotspot (captive portal to allow wifi setup for users)
  ap:
    ssid: "BLE-Hotspot"
    password: "12345678"

# After 1 minute of unsuccessful WiFi connection attempts, the 
# ESP will start a WiFi hotspot using the above ssid/password which can be used to update wifi connection details.
captive_portal:

# For configuring Wi-Fi on an ESPHome device by using a serial connection to the device, eg. USB.
improv_serial:

# For configuring Wi-Fi on an ESP32 device by using Bluetooth Low Energy (BLE) to receive the credentials.
esp32_improv:
  authorizer: none

update:
  - platform: http_request
    id: update_http_request
    name: BLE Proxy Firmware
    source: https://smarthomeguys.github.io/Bluetooth-Proxy/manifest.json
    disabled_by_default: false
    update_interval: 6h

dashboard_import:
  package_import_url: github://SmartHomeGuys/Bluetooth-Proxy/bluetooth-proxy.yaml@main
  import_full_config: false
  

# Bluebooth code starts here
# It was based on this repo: https://github.com/esphome/bluetooth-proxies/blob/main/esp32-generic/esp32-generic-c3.yaml
# Default values were used below in the links provided

# https://esphome.io/components/esp32_ble_tracker
esp32_ble_tracker:
  max_connections: 3
  scan_parameters:
    active: true
    continuous: true

# https://esphome.io/components/bluetooth_proxy.html
bluetooth_proxy:
  active: true
  cache_services: true
  connection_slots: 3


# Expose the LED to Home Assistant
light:
  - platform: esp32_rmt_led_strip
    id: "light_esp32led"
    chipset: WS2812
    rgb_order: ${esp32_led_order}
    pin: GPIO10
    num_leds: 1
    name: "ESP32 LED"
    restore_mode: ALWAYS_OFF

interval:
  # Check if WiFi is disconnected and if so set Led light to Red
  - interval: 5s
    then:
      lambda: |-
        static bool has_wifi_connected_run_once = false;
        static bool is_wifi_connected = false; 

        is_wifi_connected = wifi::global_wifi_component->is_connected();
        
        if(is_wifi_connected)
        {
          if(has_wifi_connected_run_once == false)
          {
            auto call = id(light_esp32led).turn_off();
            call.set_rgb(0.0, 0.0, 0.0);  //white
            call.perform();

            ESP_LOGD("wifi_check", "Wi-Fi connected — LED Off");
            has_wifi_connected_run_once = true;
          }
        }
        else
        {
          auto call = id(light_esp32led).turn_on();
          call.set_rgb(1.0, 0.0, 0.0);  //red
          call.perform();
          
          ESP_LOGD("wifi_check", "Wi-Fi disconnected — LED RED");
          has_wifi_connected_run_once = false;
        }

